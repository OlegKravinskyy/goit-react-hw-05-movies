{"version":3,"file":"static/js/163.ea83cdb0.chunk.js","mappings":"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","sources":["components/Api/api.js","components/Movies/Movies.styled.js","components/MoviesInfo/MoviesInfo.styled.js","components/MoviesInfo/MoviesInfo.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'b3a08fdd3c8f2c01f2754fee7d5e3f69';\n\nexport const getTrandingMovie = async () => {\n  try {\n    const response = await axios.get('/trending/movie/day', {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return response.data.results;\n  } catch (error) {\n    return null;\n  }\n};\n\nexport const getMovieByWord = async word => {\n  try {\n    const response = await axios.get(`/search/movie`, {\n      params: {\n        api_key: API_KEY,\n        query: word,\n      },\n    });\n    return response.data.results;\n  } catch {}\n};\n\nexport const getMovieById = async id => {\n  try {\n    const response = await axios.get(`/movie/${id}`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return response.data;\n  } catch {}\n};\n\nexport const getMovieCast = async id => {\n  try {\n    const response = await axios.get(`/movie/${id}/credits`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return response.data.cast;\n  } catch {}\n};\n\nexport const getMovieReviews = async id => {\n  try {\n    const response = await axios.get(`/movie/${id}/reviews`, {\n      params: {\n        api_key: API_KEY,\n        language: 'en-US',\n        page: 1,\n      },\n    });\n    return response.data.results;\n  } catch {}\n};\n","import { NavLink } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const MoviesWrapper = styled.div`\n  padding: 15px;\n`;\n\nexport const MoviesInput = styled.input`\n  margin-right: 20px;\n`;\n\nexport const MoviesButton = styled.button`\n  cursor: pointer;\n  :hover {\n    background-color: darkgrey;\n  }\n`;\n\nexport const MovieList = styled.ul`\n  list-style: none;\n`;\n\nexport const MoviesItem = styled.li`\n  :not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\n\nexport const MoviesNavLink = styled(NavLink)`\n  text-decoration: none;\n  color: black;\n  :hover {\n    background-color: darkgrey;\n    color: white;\n  }\n`;\n","import { NavLink } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const MoviesInfoWrapper = styled.div`\n  border-bottom: 2px solid black;\n`;\n\nexport const MoviesInfoButton = styled(NavLink)`\n  display: block;\n  border: 1px solid transparency;\n  width: 80px;\n  text-align: center;\n  text-decoration: none;\n  color: black;\n  margin: 30px;\n  cursor: pointer;\n  :hover {\n    background-color: darkgrey;\n  }\n`;\n\nexport const MoviesDetailsWrapper = styled.div`\n  display: flex;\n  border-bottom: 2px solid black;\n`;\nexport const MoviesInformationBox = styled.div`\n  padding: 15px;\n`;\n\nexport const MoviesInfoList = styled.ul`\n  list-style: none;\n`;\n\nexport const MoviesInfoGenres = styled.ul`\n  list-style: none;\n  margin-left: -40px;\n`;\n\nexport const MoviesAditionalInformation = styled.div`\n  padding: 15px;\n  border-bottom: 2px solid black;\n`;\n\nexport const MoviesAdditionalInformationList = styled.ul`\n  list-style: none;\n`;\n\nexport const MoviesAdditionalInformationItem = styled.li`\n  :not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\n","import { getMovieById } from 'components/Api/api';\nimport { MoviesNavLink } from 'components/Movies/Movies.styled';\nimport { useEffect, useState, Suspense, useRef } from 'react';\nimport { Outlet, useLocation, useParams } from 'react-router-dom';\nimport {\n  MoviesDetailsWrapper,\n  MoviesInfoButton,\n  MoviesInfoWrapper,\n  MoviesInformationBox,\n  MoviesInfoList,\n  MoviesAditionalInformation,\n  MoviesAdditionalInformationList,\n  MoviesAdditionalInformationItem,\n  MoviesInfoGenres,\n} from './MoviesInfo.styled';\n\nconst MoviesInfo = () => {\n  const { movieId } = useParams();\n  const [movies, setMovies] = useState(null);\n  const [error, setError] = useState(null);\n  const location = useLocation();\n  const nav = useRef(location);\n  const IMG_REGUEST = 'https://image.tmdb.org/t/p/w342';\n  const backLink = nav.current.state?.from ?? '/movies';\n\n  useEffect(() => {\n    getMovieById(movieId)\n      .then(setMovies)\n      .catch(error => {\n        setError(error.message);\n      });\n  }, [movieId]);\n\n  if (movies) {\n    const { genres } = movies;\n\n    return (\n      <MoviesInfoWrapper>\n        <MoviesInfoButton to={backLink}>Back</MoviesInfoButton>\n        {error && <h1>There is no detailed information about the film!!!</h1>}\n        {movies && (\n          <MoviesInformationBox>\n            <MoviesDetailsWrapper>\n              <div>\n                <img\n                  src={IMG_REGUEST + movies.poster_path}\n                  alt={movies.title || movies.name}\n                />\n              </div>\n              <div>\n                <MoviesInfoList>\n                  <li>\n                    <h2>{movies.title || movies.name} </h2>\n                    <p>User score {(movies.vote_average * 10).toFixed()} %</p>\n                  </li>\n                  <li>\n                    <h2>Overview</h2>\n                    <p>{movies.overview}</p>\n                  </li>\n                  <li>\n                    <h2>Genres</h2>\n                    <MoviesInfoGenres>\n                      {genres.map(genre => {\n                        return <li key={genre.id}>{genre.name}</li>;\n                      })}\n                    </MoviesInfoGenres>\n                  </li>\n                </MoviesInfoList>\n              </div>\n            </MoviesDetailsWrapper>\n            <MoviesAditionalInformation>\n              <h3>Additional information</h3>\n              <MoviesAdditionalInformationList>\n                <MoviesAdditionalInformationItem>\n                  <MoviesNavLink to={'cast'}>Cast</MoviesNavLink>\n                </MoviesAdditionalInformationItem>\n                <MoviesAdditionalInformationItem>\n                  <MoviesNavLink to={'reviews'}>Reviews</MoviesNavLink>\n                </MoviesAdditionalInformationItem>\n              </MoviesAdditionalInformationList>\n            </MoviesAditionalInformation>\n          </MoviesInformationBox>\n        )}\n        <Suspense fallback={null}>\n          <Outlet />\n        </Suspense>\n      </MoviesInfoWrapper>\n    );\n  }\n};\n\nexport default MoviesInfo;\n"],"names":["axios","API_KEY","getTrandingMovie","params","api_key","response","data","results","getMovieByWord","word","query","getMovieById","id","getMovieCast","cast","getMovieReviews","language","page","MoviesWrapper","styled","MoviesInput","MoviesButton","MovieList","MoviesItem","MoviesNavLink","NavLink","MoviesInfoWrapper","MoviesInfoButton","MoviesDetailsWrapper","MoviesInformationBox","MoviesInfoList","MoviesInfoGenres","MoviesAditionalInformation","MoviesAdditionalInformationList","MoviesAdditionalInformationItem","movieId","useParams","useState","movies","setMovies","error","setError","location","useLocation","backLink","useRef","current","state","from","useEffect","then","catch","message","genres","to","src","poster_path","alt","title","name","vote_average","toFixed","overview","map","genre","Suspense","fallback"],"sourceRoot":""}